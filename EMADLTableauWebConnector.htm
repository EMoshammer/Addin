
<html>
<head>
    <title>EMA Data layer Tableau Web Connector</title>
    <meta http-equiv="Cache-Control" content="no-store" />
	
		
	<script src="scripts/polyfill.js"></script>
	<script src="scripts/interp/browser-polyfill.min.js"></script>
	<script src="scripts/interp/babel.min.js"></script>
	<script src="scripts/interp/interpreter.js"></script>
	<script src="scripts/interp/acorn.js"></script>
	<script src="scripts/interp/babel-plugin.js"></script>
	<script src="scripts/interp/interpreter_wrapper.js"></script>

	<script src="scripts/countrycodes.js"></script>
	<script src="scripts/date.format.js"></script>
	<script src="scripts/datalayer-seriesfunctions.js"></script>
	<script src="scripts/xhr.js"></script>
	<script src="scripts/datalayer-main.js"></script>
	<script src="scripts/unittest.js"></script>
	<script src="scripts/jquery-3.5.1.min.js"></script>
		
		
    <link rel="stylesheet" href="scripts/bootstrap.min.css">
    <link rel="stylesheet" href="scripts/jquery-ui.min.css">
	<link rel="stylesheet" href="scripts/jquery-ui.theme.min.css">
	<link rel="stylesheet" href="scripts/jquery-ui.structure.min.css">
	<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css"/>
	<link rel="stylesheet" href="scripts/bootstrap-multiselect.min.css">
	
	
	<script src="scripts/bootstrap.bundle.min.js"></script>

	<script src="scripts/ag-grid-community.min.js"></script>
	
	<script src="scripts/jquery-ui.min.js"></script>
	<script src="scripts/bootstrap-multiselect.min.js"></script>
	
    <script src="https://connectors.tableau.com/libs/tableauwdc-2.3.latest.js" type="text/javascript"></script>
    
	<script src="scripts/TWC-FE.js"></script>
	
	<script type="text/javascript">
		var myConnector = null;
		
		var doneCallback = function() {};
		
		var DL;
		var queries_data;
		
		var default_query = {
			freq: 'A',
			region: ['AT'],
			StartDate: '2010',
			EndDate: '2020',
			queries: [
				{header: 'Country', queryDisplay: '"$a2$"', datatype: tableau.dataTypeEnum.string},
				{header: 'Date', queryDisplay: 'date', datatype: tableau.dataTypeEnum.date},
				{header: 'GDP', queryDisplay: 'ECB:AME.A.$a3$.1.0.0.0.OVGD', datatype: tableau.dataTypeEnum.float},
			]
		};
		
		var isdebug = 0;

		$( function() {
				
			// Create the connector object
			myConnector = tableau.makeConnector();

			// Define the schema
			myConnector.getSchema = function(schemaCallback) {
		
				var res = {id: "Series", alias: "Series Data", columns: []};
				for (var i=0; i<queries_data.queries.length; i++) {
				
					var z = queries_data.queries[i];
					
					if (z.state != 'error') {
						
						var d_type = tableau.dataTypeEnum.float;
						if (z.value.data[0][0] instanceof Date) d_type = tableau.dataTypeEnum.date;
						if (typeof z.value.data[0][0] === 'string' || z.value.data[0][0] instanceof String) d_type = tableau.dataTypeEnum.string;
		
						z.datatype = d_type;
						
						res.columns.push({id: z.header, dataType:d_type});
					}
				
					
				}
			
				schemaCallback([res]);
			};
		
			// Download the data
			myConnector.getData = function(table, done) {
	
				var resultData = [];
				for (var i=0; i<queries_data.queries.length; i++) {
					var z = queries_data.queries[i];
					
					if (z.state != 'error') {
						
						for (var j=0; j<z.value.data.length; j++) {
							if (resultData[j] == undefined) resultData[j] = {};
							var v = z.value.data[j][0];
							if (v instanceof Date) v = v.toISOString().split('T')[0];
							resultData[j][z.header] = v;
						}
					}
				}
			
				table.appendRows(resultData);
				done();
			};
			
			myConnector.init = function(done){
				if (tableau.phase == tableau.phaseEnum.gatherDataPhase) {
					doneCallback = done;					
					loadFromConnectionData(JSON.parse(tableau.connectionData), true);
				} else {
					alert(tableau.connectionData);
					setupFE();
					loadFromConnectionData(default_query, false);
					done();
				}
			};

			tableau.registerConnector(myConnector);
			
			
			report = function(status, r) {
			
				if (tableau.phase == tableau.phaseEnum.gatherDataPhase) {
					
					if (!status.progress) doneCallback();

				} else {
					var statehint = ''
					if (r.state == 'error') statehint = r.data;
					r.statehint = statehint;
					gridOptions.api.getRowNode(r.gridrow.id).setDataValue('state', r.state);
				}
			}

			function loadFromConnectionData(connData, silent) {
				var d = connData;
				
				queries_data = d;
				renameDuplicates(d.queries);
				
				$('#freq').val(d.freq);
				$('#StartDate').val(d.StartDate);
				$('#EndDate').val(d.EndDate);
				$('#region').multiselect('select', d.region);
				
				if (!silent) gridOptions.api.setRowData([]);

				if (d.queries.length) {

					for (var i=0; i<d.queries.length; i++) {
										
						d.queries[i].query = getQuery(d.queries[i].queryDisplay, d.StartDate, d.EndDate, d.region);
						if (!silent) d.queries[i].gridrow = gridOptions.api.applyTransaction({add: [d.queries[i]]}).add[0];
					}
					
					DL = new DataLayer(d.queries, report, {freq: d.freq});

				} else {
				
					doneCallback();
				}
			}
			
			function renameDuplicates(q) {
			
				var dupl = {};
			
				for (var i=0; i<q.length; i++) {
					if (dupl[q[i].header]) {
						j = 1;
						while ( dupl[q[i].header + '_' + j] ) { j = j + 1; }
						q[i].header = q[i].header + '_' + j;
					}
					dupl[q[i].header] = 1;
				}
			}
			
			if (isdebug) {
			
				doneCallback = function(a) {alert(JSON.stringify(a));}
			
				tableau.phase = tableau.phaseEnum.gatherDataPhase;
			
				loadFromConnectionData(default_query, true);
				
				myConnector.getSchema(doneCallback);
			
			}
	

		});

	</script>
</head>

<body style="padding:15">

<div style="float:none;">
<b>Panel settings</b><br>

	<div style="float:left; margin-left:10px">
		<label for="freq" style="font-weight:bold; font-size:11px">Frequency</label><br>
		<select name="freq" id="freq">
		  <option selected="selected" value="A">Annual</option>
		  <option value="Q">Quarterly</option>
		  <option value="S">Semiannual</option>
		  <option value="M">Monthly</option>
		  <option value="W">Weekly</option>
		  <option value="B">Businessday</option>
		  <option value="D">Daily</option>
		</select>
	</div>
	<div style="float:left; margin-left:10px">
		<label for="StartDate" style="font-weight:bold; font-size:11px">Start Date</label><br>
		<input type="text" id="StartDate" value=2010> 
	</div>
	<div style="float:left; margin-left:10px">
		<label for="EndDate" style="font-weight:bold; font-size:11px">End Date</label><br>
		<input type="text" id="EndDate" value=2020>
	</div>
	<div style="float:left; margin-left:10px">
		<label for="region" style="font-weight:bold; font-size:11px">Region</label><br>
		<select id="region" multiple="multiple"></select>
	</div>
	
</div>

<div style="clear: left;">
<br>

<b>Series selection</b><br>
	<div id="queriesgrid" style="height: 400px; width:700px;" class="ag-theme-alpine"></div>

	<button type="button" id="btndelete">Delete selection</button>
	<button type="button" id="btnaddseries">New series</button>
	<button type="button" id="btnbulk">Bulk Import/Export</button>
	<button type="button" id="btnpreview">Preview</button>
	<button type="submit" id="submitButton">Go</button>
	
</div>

<div id="dlgpreview" title="Preview">
	<div id="previewgrid" style="height: 400px; width:700px;" class="ag-theme-alpine"></div>
</div>

<div id="dlgaddseries" title="Add new series">
  <form>
    <fieldset>
      <label for="dlgaddseries_header" style="font-weight:bold; font-size:11px">Header</label><br>
      <input type="text" name="dlgaddseries_header" id="dlgaddseries_header" value="" class="text ui-widget-content ui-corner-all"><br><br>
      <label for="dlgaddseries_query" style="font-weight:bold; font-size:11px">Query</label><br>
      <input type="text" name="dlgaddseries_query" id="dlgaddseries_query" value="" class="text ui-widget-content ui-corner-all">

      <input type="submit" tabindex="-1" style="position:absolute; top:-1000px">
    </fieldset>
  </form>
</div>

<div id="dlgbulk" title="Bulk import and export">
  <form>
    <fieldset>
		<label for="dlgbulk_txt" style="font-weight:bold; font-size:11px">Each line has the format "[header],[query]"</label><br>
		<textarea rows = "9" cols = "60" id="dlgbulk_txt" class="text ui-widget-content ui-corner-all"></textarea>
      <input type="submit" tabindex="-1" style="position:absolute; top:-1000px">
    </fieldset>
  </form>
</div>

</body>
</html>
